// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


model Club {
  club_id     Int             @id @default(autoincrement())
  club_name   String
  club_img  String?
  club_leader  Int
  club_code   String  @unique
  member_count Int
  created_at         DateTime  @default(now())
  schedules   ClubSchedule[]  
  members     ClubMember[]     
  teams       Team[]         
}

model ClubSchedule {
  club_schedule_id   Int       @id @default(autoincrement())
  club_id            Int
  club_schedule_start DateTime
  club_schedule_end  DateTime
  club_schedule_title String?
  club_schedule_place String?
  created_at         DateTime  @default(now())
  club               Club      @relation(fields: [club_id], references: [club_id], onDelete: Cascade) 
  @@index([club_id, club_schedule_start])
}

model ClubMember {
  club_id Int
  user_id Int
  created_at         DateTime  @default(now())
  club    Club    @relation(fields: [club_id], references: [club_id], onDelete: Cascade)
  user    WeBandUser @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([club_id, user_id])
}

model WeBandUser {
  user_id      Int           @id @default(autoincrement())
  kakao_id     BigInt        @unique
  profile_img  String?
  user_name    String
  email        String        @unique
  clubMembers  ClubMember[]  
  teamCreators Team[] 
  teamMembers  TeamMember[]   
  schedules    UserSchedule[]   
  teamSchedules TeamSchedule[]   
}

model UserSchedule {
  user_schedule_id        Int       @id @default(autoincrement())
  user_schedule_title     String
  user_schedule_start     DateTime
  user_schedule_end       DateTime
  user_schedule_place     String?
  is_public           Boolean   @default(true)
  user_id            Int
  created_at         DateTime  @default(now())
  user               WeBandUser @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  @@index([user_id, user_schedule_start])
}

model Team {
  team_id     Int            @id @default(autoincrement())
  created_by  Int
  team_name   String
  club_id     Int
  created_at  DateTime       @default(now())
  club        Club           @relation(fields: [club_id], references: [club_id], onDelete: Cascade)  
  creator     WeBandUser     @relation(fields: [created_by], references: [user_id])
  members     TeamMember[]   
  schedules   TeamSchedule[] 
  @@index([team_id, club_id])
}

model TeamMember {
  team_id Int
  user_id Int
  created_at         DateTime  @default(now())
  team    Team    @relation(fields: [team_id], references: [team_id], onDelete: Cascade)  
  user    WeBandUser @relation(fields: [user_id], references: [user_id], onDelete: Cascade)

  @@id([team_id, user_id])
}

model TeamSchedule {
  team_schedule_id   Int       @id @default(autoincrement())
  team_schedule_title String
  team_schedule_start DateTime
  team_schedule_end   DateTime
  team_schedule_place     String?
  team_schedule_participated String?
  team_id            Int
  created_by         Int
  created_at         DateTime  @default(now())
  team               Team      @relation(fields: [team_id], references: [team_id], onDelete: Cascade)
  creator            WeBandUser @relation(fields: [created_by], references: [user_id])
  @@index([team_id, team_schedule_start])
}


